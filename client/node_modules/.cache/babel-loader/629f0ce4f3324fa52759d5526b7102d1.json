{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from \"react\"; // const baseUrl = process.env.REACT_APP_API_BASE_URL;\n\nexport default function useFetch(url) {\n  _s();\n\n  const isMounted = useRef(false);\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    isMounted.current = true;\n\n    async function init() {\n      try {\n        const response = await fetch(url);\n\n        if (response.ok) {\n          const json = await response.json();\n          if (isMounted.current) setData(json);\n        } else {\n          throw response;\n        }\n      } catch (e) {\n        if (isMounted.current) setError(e);\n      } finally {\n        if (isMounted.current) setLoading(false);\n      }\n    }\n\n    init();\n    return () => {\n      isMounted.current = false;\n    };\n  }, [url]);\n  return {\n    data,\n    error,\n    loading\n  };\n}\n\n_s(useFetch, \"Zkhq9xD2yxhM90GFx9q1vhdG/ho=\");\n\nexport function Fetch({\n  url,\n  children\n}) {\n  _s2();\n\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(url);\n  return children(data, loading, error);\n}\n\n_s2(Fetch, \"r14mJDRFIohEWG5JuFWBli83tkQ=\", false, function () {\n  return [useFetch];\n});\n\n_c = Fetch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Fetch\");","map":{"version":3,"sources":["D:/Coding/Projects/the-hub/src/services/useFetch.js"],"names":["useState","useRef","useEffect","useFetch","url","isMounted","data","setData","error","setError","loading","setLoading","current","init","response","fetch","ok","json","e","Fetch","children"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C,C,CAEA;;AAEA,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAAA;;AACpC,QAAMC,SAAS,GAAGJ,MAAM,CAAC,KAAD,CAAxB;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,SAAS,CAACO,OAAV,GAAoB,IAApB;;AACA,mBAAeC,IAAf,GAAsB;AACpB,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACX,GAAD,CAA5B;;AACA,YAAIU,QAAQ,CAACE,EAAb,EAAiB;AACf,gBAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACA,cAAIZ,SAAS,CAACO,OAAd,EAAuBL,OAAO,CAACU,IAAD,CAAP;AACxB,SAHD,MAGO;AACL,gBAAMH,QAAN;AACD;AACF,OARD,CAQE,OAAOI,CAAP,EAAU;AACV,YAAIb,SAAS,CAACO,OAAd,EAAuBH,QAAQ,CAACS,CAAD,CAAR;AACxB,OAVD,SAUU;AACR,YAAIb,SAAS,CAACO,OAAd,EAAuBD,UAAU,CAAC,KAAD,CAAV;AACxB;AACF;;AACDE,IAAAA,IAAI;AAEJ,WAAO,MAAM;AACXR,MAAAA,SAAS,CAACO,OAAV,GAAoB,KAApB;AACD,KAFD;AAGD,GAtBQ,EAsBN,CAACR,GAAD,CAtBM,CAAT;AAwBA,SAAO;AAAEE,IAAAA,IAAF;AAAQE,IAAAA,KAAR;AAAeE,IAAAA;AAAf,GAAP;AACD;;GA/BuBP,Q;;AAiCxB,OAAO,SAASgB,KAAT,CAAe;AAAEf,EAAAA,GAAF;AAAOgB,EAAAA;AAAP,CAAf,EAAkC;AAAA;;AACvC,QAAM;AAAEd,IAAAA,IAAF;AAAQI,IAAAA,OAAR;AAAiBF,IAAAA;AAAjB,MAA2BL,QAAQ,CAACC,GAAD,CAAzC;AACA,SAAOgB,QAAQ,CAACd,IAAD,EAAOI,OAAP,EAAgBF,KAAhB,CAAf;AACD;;IAHeW,K;UACmBhB,Q;;;KADnBgB,K","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\n\r\n// const baseUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\nexport default function useFetch(url) {\r\n  const isMounted = useRef(false);\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    isMounted.current = true;\r\n    async function init() {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n          const json = await response.json();\r\n          if (isMounted.current) setData(json);\r\n        } else {\r\n          throw response;\r\n        }\r\n      } catch (e) {\r\n        if (isMounted.current) setError(e);\r\n      } finally {\r\n        if (isMounted.current) setLoading(false);\r\n      }\r\n    }\r\n    init();\r\n\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, [url]);\r\n\r\n  return { data, error, loading };\r\n}\r\n\r\nexport function Fetch({ url, children }) {\r\n  const { data, loading, error } = useFetch(url);\r\n  return children(data, loading, error);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}