{"ast":null,"code":"const one = 1;\nconst ten = 10;\nconst hundred = 100;\nconst thousand = 1000;\nconst tenThousand = 10000;\nexport const difficulties = ['easy', 'medium', 'hard'];\nexport const operations = ['addition', 'subtraction', 'multiplication'];\n\nconst random = (min, max) => Math.floor(Math.random() * (max - min)) + min;\n\nconst generateNumber = difficulty => {\n  return difficulty === 'easy' ? random(one, hundred) : difficulty === 'medium' ? random(one, thousand) : random(one, tenThousand);\n};\n\nconst createOperation = (difficulty, operation) => {\n  if (operation === 'addition' || operation === 'subtraction') {\n    console.log('agl');\n    const valOne = generateNumber(difficulty);\n    const valTwo = generateNumber(difficulty);\n    return {\n      valOne,\n      valTwo,\n      operation\n    };\n  } else {\n    if (difficulty === 'easy') {\n      return {\n        valOne: random(one, hundred),\n        valTwo: random(ten, hundred),\n        operation\n      };\n    } else if (difficulty === 'medium') {\n      return {\n        valOne: random(ten, hundred),\n        valTwo: random(ten, hundred),\n        operation\n      };\n    } else {\n      return {\n        valOne: random(one, thousand),\n        valTwo: random(one, thousand),\n        operation\n      };\n    }\n  }\n}; // const createMultiplication = (difficulty) => {\n//   const operation = 'multiplication';\n// };\n\n\nconst generateQuestions = (difficulty, operationsArr, quantity) => {\n  let questions = [];\n  console.log(operationsArr);\n  operationsArr.forEach(val => {\n    console.log(val);\n\n    for (let i = 0; i > quantity; i++) {\n      const newOperation = createOperation(difficulty, val);\n      console.log(newOperation);\n      questions.push(newOperation);\n    }\n  });\n  return questions;\n};\n\nexport default generateQuestions;","map":{"version":3,"sources":["D:/Coding/Projects/the-hub/src/components/mainScreen/math/generateQuestions.js"],"names":["one","ten","hundred","thousand","tenThousand","difficulties","operations","random","min","max","Math","floor","generateNumber","difficulty","createOperation","operation","console","log","valOne","valTwo","generateQuestions","operationsArr","quantity","questions","forEach","val","i","newOperation","push"],"mappings":"AAAA,MAAMA,GAAG,GAAG,CAAZ;AACA,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAMC,OAAO,GAAG,GAAhB;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA,MAAMC,WAAW,GAAG,KAApB;AACA,OAAO,MAAMC,YAAY,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,CAArB;AACP,OAAO,MAAMC,UAAU,GAAG,CAAC,UAAD,EAAa,aAAb,EAA4B,gBAA5B,CAAnB;;AAEP,MAAMC,MAAM,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAcC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACH,MAAL,MAAiBE,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAvE;;AAEA,MAAMI,cAAc,GAAIC,UAAD,IAAgB;AACrC,SAAOA,UAAU,KAAK,MAAf,GACHN,MAAM,CAACP,GAAD,EAAME,OAAN,CADH,GAEHW,UAAU,KAAK,QAAf,GACAN,MAAM,CAACP,GAAD,EAAMG,QAAN,CADN,GAEAI,MAAM,CAACP,GAAD,EAAMI,WAAN,CAJV;AAKD,CAND;;AAQA,MAAMU,eAAe,GAAG,CAACD,UAAD,EAAaE,SAAb,KAA2B;AACjD,MAAIA,SAAS,KAAK,UAAd,IAA4BA,SAAS,KAAK,aAA9C,EAA6D;AAC3DC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,UAAMC,MAAM,GAAGN,cAAc,CAACC,UAAD,CAA7B;AACA,UAAMM,MAAM,GAAGP,cAAc,CAACC,UAAD,CAA7B;AACA,WAAO;AAAEK,MAAAA,MAAF;AAAUC,MAAAA,MAAV;AAAkBJ,MAAAA;AAAlB,KAAP;AACD,GALD,MAKO;AACL,QAAIF,UAAU,KAAK,MAAnB,EAA2B;AACzB,aAAO;AAAEK,QAAAA,MAAM,EAAEX,MAAM,CAACP,GAAD,EAAME,OAAN,CAAhB;AAAgCiB,QAAAA,MAAM,EAAEZ,MAAM,CAACN,GAAD,EAAMC,OAAN,CAA9C;AAA8Da,QAAAA;AAA9D,OAAP;AACD,KAFD,MAEO,IAAIF,UAAU,KAAK,QAAnB,EAA6B;AAClC,aAAO;AAAEK,QAAAA,MAAM,EAAEX,MAAM,CAACN,GAAD,EAAMC,OAAN,CAAhB;AAAgCiB,QAAAA,MAAM,EAAEZ,MAAM,CAACN,GAAD,EAAMC,OAAN,CAA9C;AAA8Da,QAAAA;AAA9D,OAAP;AACD,KAFM,MAEA;AACL,aAAO;AAAEG,QAAAA,MAAM,EAAEX,MAAM,CAACP,GAAD,EAAMG,QAAN,CAAhB;AAAiCgB,QAAAA,MAAM,EAAEZ,MAAM,CAACP,GAAD,EAAMG,QAAN,CAA/C;AAAgEY,QAAAA;AAAhE,OAAP;AACD;AACF;AACF,CAfD,C,CAiBA;AACA;AACA;;;AAEA,MAAMK,iBAAiB,GAAG,CAACP,UAAD,EAAaQ,aAAb,EAA4BC,QAA5B,KAAyC;AACjE,MAAIC,SAAS,GAAG,EAAhB;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAYI,aAAZ;AACAA,EAAAA,aAAa,CAACG,OAAd,CAAuBC,GAAD,IAAS;AAC7BT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAApB,EAA8BI,CAAC,EAA/B,EAAmC;AACjC,YAAMC,YAAY,GAAGb,eAAe,CAACD,UAAD,EAAaY,GAAb,CAApC;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYU,YAAZ;AACAJ,MAAAA,SAAS,CAACK,IAAV,CAAeD,YAAf;AACD;AACF,GAPD;AAQA,SAAOJ,SAAP;AACD,CAZD;;AAaA,eAAeH,iBAAf","sourcesContent":["const one = 1;\r\nconst ten = 10;\r\nconst hundred = 100;\r\nconst thousand = 1000;\r\nconst tenThousand = 10000;\r\nexport const difficulties = ['easy', 'medium', 'hard'];\r\nexport const operations = ['addition', 'subtraction', 'multiplication'];\r\n\r\nconst random = (min, max) => Math.floor(Math.random() * (max - min)) + min;\r\n\r\nconst generateNumber = (difficulty) => {\r\n  return difficulty === 'easy'\r\n    ? random(one, hundred)\r\n    : difficulty === 'medium'\r\n    ? random(one, thousand)\r\n    : random(one, tenThousand);\r\n};\r\n\r\nconst createOperation = (difficulty, operation) => {\r\n  if (operation === 'addition' || operation === 'subtraction') {\r\n    console.log('agl');\r\n    const valOne = generateNumber(difficulty);\r\n    const valTwo = generateNumber(difficulty);\r\n    return { valOne, valTwo, operation };\r\n  } else {\r\n    if (difficulty === 'easy') {\r\n      return { valOne: random(one, hundred), valTwo: random(ten, hundred), operation };\r\n    } else if (difficulty === 'medium') {\r\n      return { valOne: random(ten, hundred), valTwo: random(ten, hundred), operation };\r\n    } else {\r\n      return { valOne: random(one, thousand), valTwo: random(one, thousand), operation };\r\n    }\r\n  }\r\n};\r\n\r\n// const createMultiplication = (difficulty) => {\r\n//   const operation = 'multiplication';\r\n// };\r\n\r\nconst generateQuestions = (difficulty, operationsArr, quantity) => {\r\n  let questions = [];\r\n  console.log(operationsArr);\r\n  operationsArr.forEach((val) => {\r\n    console.log(val);\r\n    for (let i = 0; i > quantity; i++) {\r\n      const newOperation = createOperation(difficulty, val);\r\n      console.log(newOperation);\r\n      questions.push(newOperation);\r\n    }\r\n  });\r\n  return questions;\r\n};\r\nexport default generateQuestions;\r\n"]},"metadata":{},"sourceType":"module"}