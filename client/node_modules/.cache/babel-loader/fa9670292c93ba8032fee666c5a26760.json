{"ast":null,"code":"const one = 1;\nconst ten = 10;\nconst hundred = 100;\nconst thousand = 1000;\nconst tenThousand = 10000;\nexport const difficultiesArr = ['easy', 'medium', 'hard'];\nexport const operationsArr = ['addition', 'subtraction', 'multiplication'];\n\nconst random = (min, max) => Math.floor(Math.random() * (max - min)) + min;\n\nconst generateNumber = difficulty => {\n  return difficulty === 'easy' ? random(one, hundred) : difficulty === 'medium' ? random(one, thousand) : random(one, tenThousand);\n};\n\nconst createOperation = (difficulty, operation) => {\n  if (operation === 'addition' || operation === 'subtraction') {\n    const valOne = generateNumber(difficulty);\n    const valTwo = generateNumber(difficulty);\n    return {\n      valOne,\n      valTwo,\n      operation\n    };\n  } else {\n    if (difficulty === 'easy') {\n      return {\n        valOne: random(one, ten),\n        valTwo: random(ten, hundred),\n        operation\n      };\n    } else if (difficulty === 'medium') {\n      return {\n        valOne: random(ten, hundred),\n        valTwo: random(ten, hundred),\n        operation\n      };\n    } else {\n      return {\n        valOne: random(one, hundred),\n        valTwo: random(one, thousand),\n        operation\n      };\n    }\n  }\n};\n\nconst generateQuestions = (difficulty, operationsArr, quantity) => {\n  let questions = [];\n  const questionQuantity = quantity / operationsArr.length;\n  operationsArr.forEach(val => {\n    for (let i = 0; i < questionQuantity; i++) {\n      const newOperation = createOperation(difficulty, val);\n      questions = [...questions, newOperation];\n    }\n  });\n  const shuffledQuestions = questions.sort(() => Math.random() - 0.5);\n  return shuffledQuestions;\n};\n\nexport default generateQuestions;","map":{"version":3,"sources":["D:/Coding/Projects/the-hub/client/src/components/mainScreen/math/generateQuestions.js"],"names":["one","ten","hundred","thousand","tenThousand","difficultiesArr","operationsArr","random","min","max","Math","floor","generateNumber","difficulty","createOperation","operation","valOne","valTwo","generateQuestions","quantity","questions","questionQuantity","length","forEach","val","i","newOperation","shuffledQuestions","sort"],"mappings":"AAAA,MAAMA,GAAG,GAAG,CAAZ;AACA,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAMC,OAAO,GAAG,GAAhB;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA,MAAMC,WAAW,GAAG,KAApB;AACA,OAAO,MAAMC,eAAe,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,CAAxB;AACP,OAAO,MAAMC,aAAa,GAAG,CAAC,UAAD,EAAa,aAAb,EAA4B,gBAA5B,CAAtB;;AAEP,MAAMC,MAAM,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAcC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACH,MAAL,MAAiBE,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAvE;;AAEA,MAAMI,cAAc,GAAIC,UAAD,IAAgB;AACrC,SAAOA,UAAU,KAAK,MAAf,GACHN,MAAM,CAACP,GAAD,EAAME,OAAN,CADH,GAEHW,UAAU,KAAK,QAAf,GACAN,MAAM,CAACP,GAAD,EAAMG,QAAN,CADN,GAEAI,MAAM,CAACP,GAAD,EAAMI,WAAN,CAJV;AAKD,CAND;;AAQA,MAAMU,eAAe,GAAG,CAACD,UAAD,EAAaE,SAAb,KAA2B;AACjD,MAAIA,SAAS,KAAK,UAAd,IAA4BA,SAAS,KAAK,aAA9C,EAA6D;AAC3D,UAAMC,MAAM,GAAGJ,cAAc,CAACC,UAAD,CAA7B;AACA,UAAMI,MAAM,GAAGL,cAAc,CAACC,UAAD,CAA7B;AACA,WAAO;AAAEG,MAAAA,MAAF;AAAUC,MAAAA,MAAV;AAAkBF,MAAAA;AAAlB,KAAP;AACD,GAJD,MAIO;AACL,QAAIF,UAAU,KAAK,MAAnB,EAA2B;AACzB,aAAO;AAAEG,QAAAA,MAAM,EAAET,MAAM,CAACP,GAAD,EAAMC,GAAN,CAAhB;AAA4BgB,QAAAA,MAAM,EAAEV,MAAM,CAACN,GAAD,EAAMC,OAAN,CAA1C;AAA0Da,QAAAA;AAA1D,OAAP;AACD,KAFD,MAEO,IAAIF,UAAU,KAAK,QAAnB,EAA6B;AAClC,aAAO;AAAEG,QAAAA,MAAM,EAAET,MAAM,CAACN,GAAD,EAAMC,OAAN,CAAhB;AAAgCe,QAAAA,MAAM,EAAEV,MAAM,CAACN,GAAD,EAAMC,OAAN,CAA9C;AAA8Da,QAAAA;AAA9D,OAAP;AACD,KAFM,MAEA;AACL,aAAO;AAAEC,QAAAA,MAAM,EAAET,MAAM,CAACP,GAAD,EAAME,OAAN,CAAhB;AAAgCe,QAAAA,MAAM,EAAEV,MAAM,CAACP,GAAD,EAAMG,QAAN,CAA9C;AAA+DY,QAAAA;AAA/D,OAAP;AACD;AACF;AACF,CAdD;;AAgBA,MAAMG,iBAAiB,GAAG,CAACL,UAAD,EAAaP,aAAb,EAA4Ba,QAA5B,KAAyC;AACjE,MAAIC,SAAS,GAAG,EAAhB;AACA,QAAMC,gBAAgB,GAAGF,QAAQ,GAAGb,aAAa,CAACgB,MAAlD;AAEAhB,EAAAA,aAAa,CAACiB,OAAd,CAAuBC,GAAD,IAAS;AAC7B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,gBAApB,EAAsCI,CAAC,EAAvC,EAA2C;AACzC,YAAMC,YAAY,GAAGZ,eAAe,CAACD,UAAD,EAAaW,GAAb,CAApC;AACAJ,MAAAA,SAAS,GAAG,CAAC,GAAGA,SAAJ,EAAeM,YAAf,CAAZ;AACD;AACF,GALD;AAMA,QAAMC,iBAAiB,GAAGP,SAAS,CAACQ,IAAV,CAAe,MAAMlB,IAAI,CAACH,MAAL,KAAgB,GAArC,CAA1B;AACA,SAAOoB,iBAAP;AACD,CAZD;;AAaA,eAAeT,iBAAf","sourcesContent":["const one = 1;\r\nconst ten = 10;\r\nconst hundred = 100;\r\nconst thousand = 1000;\r\nconst tenThousand = 10000;\r\nexport const difficultiesArr = ['easy', 'medium', 'hard'];\r\nexport const operationsArr = ['addition', 'subtraction', 'multiplication'];\r\n\r\nconst random = (min, max) => Math.floor(Math.random() * (max - min)) + min;\r\n\r\nconst generateNumber = (difficulty) => {\r\n  return difficulty === 'easy'\r\n    ? random(one, hundred)\r\n    : difficulty === 'medium'\r\n    ? random(one, thousand)\r\n    : random(one, tenThousand);\r\n};\r\n\r\nconst createOperation = (difficulty, operation) => {\r\n  if (operation === 'addition' || operation === 'subtraction') {\r\n    const valOne = generateNumber(difficulty);\r\n    const valTwo = generateNumber(difficulty);\r\n    return { valOne, valTwo, operation };\r\n  } else {\r\n    if (difficulty === 'easy') {\r\n      return { valOne: random(one, ten), valTwo: random(ten, hundred), operation };\r\n    } else if (difficulty === 'medium') {\r\n      return { valOne: random(ten, hundred), valTwo: random(ten, hundred), operation };\r\n    } else {\r\n      return { valOne: random(one, hundred), valTwo: random(one, thousand), operation };\r\n    }\r\n  }\r\n};\r\n\r\nconst generateQuestions = (difficulty, operationsArr, quantity) => {\r\n  let questions = [];\r\n  const questionQuantity = quantity / operationsArr.length;\r\n\r\n  operationsArr.forEach((val) => {\r\n    for (let i = 0; i < questionQuantity; i++) {\r\n      const newOperation = createOperation(difficulty, val);\r\n      questions = [...questions, newOperation];\r\n    }\r\n  });\r\n  const shuffledQuestions = questions.sort(() => Math.random() - 0.5);\r\n  return shuffledQuestions;\r\n};\r\nexport default generateQuestions;\r\n"]},"metadata":{},"sourceType":"module"}